[02/07 16:31:03] mydl INFO: Rank of current process: 0. World size: 1
[02/07 16:31:04] mydl INFO: Environment info:
----------------------  ---------------------------------------------------------
sys.platform            linux
Python                  3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]
numpy                   1.17.3
mydl                    0.1 @/w/mydl_demo/mydl
mydl compiler           GCC 7.4
mydl CUDA compiler      10.1
mydl arch flags         sm_75
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.3.1 @/usr/local/lib/python3.6/dist-packages/torch
PyTorch debug build     False
CUDA available          True
GPU 0                   GeForce RTX 2080 Ti
CUDA_HOME               /usr/local/cuda
NVCC                    Cuda compilation tools, release 10.1, V10.1.243
Pillow                  6.1.0.post0
torchvision             0.4.2 @/usr/local/lib/python3.6/dist-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75
cv2                     4.1.2
----------------------  ---------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.20.5 (Git Hash 0125f28c61c1f822fd48570b4c1066f96fcb9b2e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.1
  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=True, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

[02/07 16:31:04] mydl INFO: Command line arguments: Namespace(config_file='/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml', dist_url=None, eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[02/07 16:31:04] mydl INFO: Contents of args.config_file=/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml:
INPUT:
  MIN_SIZE_TRAIN: 512
  MAX_SIZE_TRAIN: 512

DATASETS:
  TRAIN_ROOT: "datasets/train"
  TRAIN_LABEL: "datasets/train_split_0.csv"
  VALID_ROOT: "datasets/train"
  VALID_LABEL: "datasets/valid_split_0.csv"

MODEL:
  NAME: "resnet18_maxavg"
  WEIGHT: ""
  LOSS: "macro f1"
  META_ARCHITECTURE: "ProteinResnet"

DATALOADER:
  SAMPLER_WEIGHTS: "datasets/train_split_0_weights.pickle"
  SAMPLER: "weighted"
  AUGMENT: "heavy"

SOLVER:
  OPTIMIZER: "sgd"
  SCHEDULER: "StepLR"
  STEP_SIZE: 8
  FINETUNE: "on"
  TRAIN_EPOCH: 100
  BASE_LR: 0.04
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128

TEST:
  IMS_PER_BATCH: 64
  TTA: 'on'

OUTPUT_DIR: "dump/res18_cv0"
VERSION: 1

[02/07 16:31:04] mydl INFO: Running with full config:
DATALOADER:
  AUGMENT: heavy
  NUM_WORKERS: 8
  SAMPLER: weighted
  SAMPLER_WEIGHTS: datasets/train_split_0_weights.pickle
  SIZE_DIVISIBILITY: 0
DATASETS:
  TEST: test
  TEST_LABEL: kaggle/sample_submission.csv
  TEST_ROOT: kaggle/test
  TRAIN: train
  TRAIN_LABEL: datasets/train_split_0.csv
  TRAIN_ROOT: datasets/train
  VALID: valid
  VALID_LABEL: datasets/valid_split_0.csv
  VALID_ROOT: datasets/train
INPUT:
  MAX_SIZE_TEST: 512
  MAX_SIZE_TRAIN: 512
  MIN_SIZE_TEST: 512
  MIN_SIZE_TRAIN: 512
  TEST_PIXEL_MEAN: [0.0591, 0.0453, 0.0407, 0.0592]
  TEST_PIXEL_STD: [0.1037, 0.0798, 0.1066, 0.0988]
  TRAIN_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  TRAIN_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
  VALID_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  VALID_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
MODEL:
  DEVICE: cuda
  LOSS: macro f1
  LOSS_WEIGHT: [1.0, 3.28, 2.03, 3.19, 2.77, 2.61, 3.08, 2.17, 5.94, 6.01, 6.08, 3.64, 3.62, 4.03, 3.45, 7.15, 4.16, 5.23, 3.77, 3.12, 5.25, 1.8, 3.41, 2.08, 5.23, 1.0, 4.75, 6.44]
  META_ARCHITECTURE: ProteinResnet
  NAME: resnet18_maxavg
  NUM_CLASS: 28
  WEIGHT: 
OUTPUT_DIR: dump/res18_cv0
SOLVER:
  BASE_LR: 0.04
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 10
  FINETUNE: on
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128
  MIXUP: off
  MOMENTUM: 0.9
  OPTIMIZER: sgd
  PATIENCE: 10
  SCHEDULER: StepLR
  STEPS: (10, 20, 30, 40, 50, 60, 70, 80, 90)
  STEP_SIZE: 8
  TRAIN_EPOCH: 100
  T_MAX: 10
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 64
  TTA: on
VERSION: 1
[02/07 16:31:04] mydl INFO: Full config saved to /w/mydl_demo/dump/res18_cv0/config.yaml
[02/07 16:31:05] mydl INFO: Model:
DataParallel(
  (module): NetWrapper(
    (backbone): ResNet18MaxAvgProtein(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer2): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer3): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer4): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Sequential(
        (bn1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop1): Dropout(p=0.5, inplace=False)
        (linear1): Linear(in_features=1024, out_features=512, bias=True)
        (relu1): ReLU()
        (bn2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop2): Dropout(p=0.5, inplace=False)
        (linear2): Linear(in_features=512, out_features=28, bias=True)
      )
      (conv1_y): Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
      (ada_avgpool): AdaptiveAvgPool2d(output_size=1)
      (ada_maxpool): AdaptiveMaxPool2d(output_size=1)
    )
  )
)
[02/07 16:37:12] mydl INFO: Rank of current process: 0. World size: 1
[02/07 16:37:12] mydl INFO: Environment info:
----------------------  ---------------------------------------------------------
sys.platform            linux
Python                  3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]
numpy                   1.17.3
mydl                    0.1 @/w/mydl_demo/mydl
mydl compiler           GCC 7.4
mydl CUDA compiler      10.1
mydl arch flags         sm_75
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.3.1 @/usr/local/lib/python3.6/dist-packages/torch
PyTorch debug build     False
CUDA available          True
GPU 0                   GeForce RTX 2080 Ti
CUDA_HOME               /usr/local/cuda
NVCC                    Cuda compilation tools, release 10.1, V10.1.243
Pillow                  6.1.0.post0
torchvision             0.4.2 @/usr/local/lib/python3.6/dist-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75
cv2                     4.1.2
----------------------  ---------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.20.5 (Git Hash 0125f28c61c1f822fd48570b4c1066f96fcb9b2e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.1
  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=True, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

[02/07 16:37:12] mydl INFO: Command line arguments: Namespace(config_file='/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml', dist_url=None, eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[02/07 16:37:12] mydl INFO: Contents of args.config_file=/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml:
INPUT:
  MIN_SIZE_TRAIN: 512
  MAX_SIZE_TRAIN: 512

DATASETS:
  TRAIN_ROOT: "datasets/train"
  TRAIN_LABEL: "datasets/train_split_0.csv"
  VALID_ROOT: "datasets/train"
  VALID_LABEL: "datasets/valid_split_0.csv"

MODEL:
  NAME: "resnet18_maxavg"
  WEIGHT: ""
  LOSS: "macro f1"
  META_ARCHITECTURE: "ProteinResnet"

DATALOADER:
  SAMPLER_WEIGHTS: "datasets/train_split_0_weights.pickle"
  SAMPLER: "weighted"
  AUGMENT: "heavy"

SOLVER:
  OPTIMIZER: "sgd"
  SCHEDULER: "StepLR"
  STEP_SIZE: 8
  FINETUNE: "on"
  TRAIN_EPOCH: 100
  BASE_LR: 0.04
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128

TEST:
  IMS_PER_BATCH: 64
  TTA: 'on'

OUTPUT_DIR: "dump/res18_cv0"
VERSION: 1

[02/07 16:37:12] mydl INFO: Running with full config:
DATALOADER:
  AUGMENT: heavy
  NUM_WORKERS: 8
  SAMPLER: weighted
  SAMPLER_WEIGHTS: datasets/train_split_0_weights.pickle
  SIZE_DIVISIBILITY: 0
DATASETS:
  TEST: test
  TEST_LABEL: kaggle/sample_submission.csv
  TEST_ROOT: kaggle/test
  TRAIN: train
  TRAIN_LABEL: datasets/train_split_0.csv
  TRAIN_ROOT: datasets/train
  VALID: valid
  VALID_LABEL: datasets/valid_split_0.csv
  VALID_ROOT: datasets/train
INPUT:
  MAX_SIZE_TEST: 512
  MAX_SIZE_TRAIN: 512
  MIN_SIZE_TEST: 512
  MIN_SIZE_TRAIN: 512
  TEST_PIXEL_MEAN: [0.0591, 0.0453, 0.0407, 0.0592]
  TEST_PIXEL_STD: [0.1037, 0.0798, 0.1066, 0.0988]
  TRAIN_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  TRAIN_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
  VALID_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  VALID_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
MODEL:
  DEVICE: cuda
  LOSS: macro f1
  LOSS_WEIGHT: [1.0, 3.28, 2.03, 3.19, 2.77, 2.61, 3.08, 2.17, 5.94, 6.01, 6.08, 3.64, 3.62, 4.03, 3.45, 7.15, 4.16, 5.23, 3.77, 3.12, 5.25, 1.8, 3.41, 2.08, 5.23, 1.0, 4.75, 6.44]
  META_ARCHITECTURE: ProteinResnet
  NAME: resnet18_maxavg
  NUM_CLASS: 28
  WEIGHT: 
OUTPUT_DIR: dump/res18_cv0
SOLVER:
  BASE_LR: 0.04
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 10
  FINETUNE: on
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128
  MIXUP: off
  MOMENTUM: 0.9
  OPTIMIZER: sgd
  PATIENCE: 10
  SCHEDULER: StepLR
  STEPS: (10, 20, 30, 40, 50, 60, 70, 80, 90)
  STEP_SIZE: 8
  TRAIN_EPOCH: 100
  T_MAX: 10
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 64
  TTA: on
VERSION: 1
[02/07 16:37:12] mydl INFO: Full config saved to /w/mydl_demo/dump/res18_cv0/config.yaml
[02/07 16:37:14] mydl INFO: Model:
DataParallel(
  (module): NetWrapper(
    (backbone): ResNet18MaxAvgProtein(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer2): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer3): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer4): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Sequential(
        (bn1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop1): Dropout(p=0.5, inplace=False)
        (linear1): Linear(in_features=1024, out_features=512, bias=True)
        (relu1): ReLU()
        (bn2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop2): Dropout(p=0.5, inplace=False)
        (linear2): Linear(in_features=512, out_features=28, bias=True)
      )
      (conv1_y): Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
      (ada_avgpool): AdaptiveAvgPool2d(output_size=1)
      (ada_maxpool): AdaptiveMaxPool2d(output_size=1)
    )
  )
)
[02/07 16:39:55] mydl INFO: Rank of current process: 0. World size: 1
[02/07 16:39:55] mydl INFO: Environment info:
----------------------  ---------------------------------------------------------
sys.platform            linux
Python                  3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]
numpy                   1.17.3
mydl                    0.1 @/w/mydl_demo/mydl
mydl compiler           GCC 7.4
mydl CUDA compiler      10.1
mydl arch flags         sm_75
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.3.1 @/usr/local/lib/python3.6/dist-packages/torch
PyTorch debug build     False
CUDA available          True
GPU 0                   GeForce RTX 2080 Ti
CUDA_HOME               /usr/local/cuda
NVCC                    Cuda compilation tools, release 10.1, V10.1.243
Pillow                  6.1.0.post0
torchvision             0.4.2 @/usr/local/lib/python3.6/dist-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75
cv2                     4.1.2
----------------------  ---------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.20.5 (Git Hash 0125f28c61c1f822fd48570b4c1066f96fcb9b2e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.1
  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=True, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

[02/07 16:39:55] mydl INFO: Command line arguments: Namespace(config_file='/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml', dist_url=None, eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[02/07 16:39:55] mydl INFO: Contents of args.config_file=/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml:
INPUT:
  MIN_SIZE_TRAIN: 512
  MAX_SIZE_TRAIN: 512

DATASETS:
  TRAIN_ROOT: "datasets/train"
  TRAIN_LABEL: "datasets/train_split_0.csv"
  VALID_ROOT: "datasets/train"
  VALID_LABEL: "datasets/valid_split_0.csv"

MODEL:
  NAME: "resnet18_maxavg"
  WEIGHT: ""
  LOSS: "macro f1"
  META_ARCHITECTURE: "ProteinResnet"

DATALOADER:
  SAMPLER_WEIGHTS: "datasets/train_split_0_weights.pickle"
  SAMPLER: "weighted"
  AUGMENT: "heavy"

SOLVER:
  OPTIMIZER: "sgd"
  SCHEDULER: "StepLR"
  STEP_SIZE: 8
  FINETUNE: "on"
  TRAIN_EPOCH: 100
  BASE_LR: 0.04
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128

TEST:
  IMS_PER_BATCH: 64
  TTA: 'on'

OUTPUT_DIR: "dump/res18_cv0"
VERSION: 1

[02/07 16:39:55] mydl INFO: Running with full config:
DATALOADER:
  AUGMENT: heavy
  NUM_WORKERS: 8
  SAMPLER: weighted
  SAMPLER_WEIGHTS: datasets/train_split_0_weights.pickle
  SIZE_DIVISIBILITY: 0
DATASETS:
  TEST: test
  TEST_LABEL: kaggle/sample_submission.csv
  TEST_ROOT: kaggle/test
  TRAIN: train
  TRAIN_LABEL: datasets/train_split_0.csv
  TRAIN_ROOT: datasets/train
  VALID: valid
  VALID_LABEL: datasets/valid_split_0.csv
  VALID_ROOT: datasets/train
INPUT:
  MAX_SIZE_TEST: 512
  MAX_SIZE_TRAIN: 512
  MIN_SIZE_TEST: 512
  MIN_SIZE_TRAIN: 512
  TEST_PIXEL_MEAN: [0.0591, 0.0453, 0.0407, 0.0592]
  TEST_PIXEL_STD: [0.1037, 0.0798, 0.1066, 0.0988]
  TRAIN_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  TRAIN_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
  VALID_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  VALID_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
MODEL:
  DEVICE: cuda
  LOSS: macro f1
  LOSS_WEIGHT: [1.0, 3.28, 2.03, 3.19, 2.77, 2.61, 3.08, 2.17, 5.94, 6.01, 6.08, 3.64, 3.62, 4.03, 3.45, 7.15, 4.16, 5.23, 3.77, 3.12, 5.25, 1.8, 3.41, 2.08, 5.23, 1.0, 4.75, 6.44]
  META_ARCHITECTURE: ProteinResnet
  NAME: resnet18_maxavg
  NUM_CLASS: 28
  WEIGHT: 
OUTPUT_DIR: dump/res18_cv0
SOLVER:
  BASE_LR: 0.04
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 10
  FINETUNE: on
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128
  MIXUP: off
  MOMENTUM: 0.9
  OPTIMIZER: sgd
  PATIENCE: 10
  SCHEDULER: StepLR
  STEPS: (10, 20, 30, 40, 50, 60, 70, 80, 90)
  STEP_SIZE: 8
  TRAIN_EPOCH: 100
  T_MAX: 10
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 64
  TTA: on
VERSION: 1
[02/07 16:39:55] mydl INFO: Full config saved to /w/mydl_demo/dump/res18_cv0/config.yaml
[02/07 16:39:56] mydl INFO: Model:
DataParallel(
  (module): NetWrapper(
    (backbone): ResNet18MaxAvgProtein(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer2): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer3): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer4): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Sequential(
        (bn1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop1): Dropout(p=0.5, inplace=False)
        (linear1): Linear(in_features=1024, out_features=512, bias=True)
        (relu1): ReLU()
        (bn2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop2): Dropout(p=0.5, inplace=False)
        (linear2): Linear(in_features=512, out_features=28, bias=True)
      )
      (conv1_y): Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
      (ada_avgpool): AdaptiveAvgPool2d(output_size=1)
      (ada_maxpool): AdaptiveMaxPool2d(output_size=1)
    )
  )
)
[02/07 16:43:51] mydl INFO: Rank of current process: 0. World size: 1
[02/07 16:43:51] mydl INFO: Environment info:
----------------------  ---------------------------------------------------------
sys.platform            linux
Python                  3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]
numpy                   1.17.3
mydl                    0.1 @/w/mydl_demo/mydl
mydl compiler           GCC 7.4
mydl CUDA compiler      10.1
mydl arch flags         sm_75
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.3.1 @/usr/local/lib/python3.6/dist-packages/torch
PyTorch debug build     False
CUDA available          True
GPU 0                   GeForce RTX 2080 Ti
CUDA_HOME               /usr/local/cuda
NVCC                    Cuda compilation tools, release 10.1, V10.1.243
Pillow                  6.1.0.post0
torchvision             0.4.2 @/usr/local/lib/python3.6/dist-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75
cv2                     4.1.2
----------------------  ---------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.20.5 (Git Hash 0125f28c61c1f822fd48570b4c1066f96fcb9b2e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.1
  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=True, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

[02/07 16:43:51] mydl INFO: Command line arguments: Namespace(config_file='/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml', dist_url=None, eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[02/07 16:43:51] mydl INFO: Contents of args.config_file=/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml:
INPUT:
  MIN_SIZE_TRAIN: 512
  MAX_SIZE_TRAIN: 512

DATASETS:
  TRAIN_ROOT: "datasets/train"
  TRAIN_LABEL: "datasets/train_split_0.csv"
  VALID_ROOT: "datasets/train"
  VALID_LABEL: "datasets/valid_split_0.csv"

MODEL:
  NAME: "resnet18_maxavg"
  WEIGHT: ""
  LOSS: "macro f1"
  META_ARCHITECTURE: "ProteinResnet"

DATALOADER:
  SAMPLER_WEIGHTS: "datasets/train_split_0_weights.pickle"
  SAMPLER: "weighted"
  AUGMENT: "heavy"

SOLVER:
  OPTIMIZER: "sgd"
  SCHEDULER: "StepLR"
  STEP_SIZE: 8
  FINETUNE: "on"
  TRAIN_EPOCH: 100
  BASE_LR: 0.04
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128

TEST:
  IMS_PER_BATCH: 64
  TTA: 'on'

OUTPUT_DIR: "dump/res18_cv0"
VERSION: 1

[02/07 16:43:51] mydl INFO: Running with full config:
DATALOADER:
  AUGMENT: heavy
  NUM_WORKERS: 8
  SAMPLER: weighted
  SAMPLER_WEIGHTS: datasets/train_split_0_weights.pickle
  SIZE_DIVISIBILITY: 0
DATASETS:
  TEST: test
  TEST_LABEL: kaggle/sample_submission.csv
  TEST_ROOT: kaggle/test
  TRAIN: train
  TRAIN_LABEL: datasets/train_split_0.csv
  TRAIN_ROOT: datasets/train
  VALID: valid
  VALID_LABEL: datasets/valid_split_0.csv
  VALID_ROOT: datasets/train
INPUT:
  MAX_SIZE_TEST: 512
  MAX_SIZE_TRAIN: 512
  MIN_SIZE_TEST: 512
  MIN_SIZE_TRAIN: 512
  TEST_PIXEL_MEAN: [0.0591, 0.0453, 0.0407, 0.0592]
  TEST_PIXEL_STD: [0.1037, 0.0798, 0.1066, 0.0988]
  TRAIN_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  TRAIN_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
  VALID_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  VALID_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
MODEL:
  DEVICE: cuda
  LOSS: macro f1
  LOSS_WEIGHT: [1.0, 3.28, 2.03, 3.19, 2.77, 2.61, 3.08, 2.17, 5.94, 6.01, 6.08, 3.64, 3.62, 4.03, 3.45, 7.15, 4.16, 5.23, 3.77, 3.12, 5.25, 1.8, 3.41, 2.08, 5.23, 1.0, 4.75, 6.44]
  META_ARCHITECTURE: ProteinResnet
  NAME: resnet18_maxavg
  NUM_CLASS: 28
  WEIGHT: 
OUTPUT_DIR: dump/res18_cv0
SOLVER:
  BASE_LR: 0.04
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 10
  FINETUNE: on
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128
  MIXUP: off
  MOMENTUM: 0.9
  OPTIMIZER: sgd
  PATIENCE: 10
  SCHEDULER: StepLR
  STEPS: (10, 20, 30, 40, 50, 60, 70, 80, 90)
  STEP_SIZE: 8
  TRAIN_EPOCH: 100
  T_MAX: 10
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 64
  TTA: on
VERSION: 1
[02/07 16:43:51] mydl INFO: Full config saved to /w/mydl_demo/dump/res18_cv0/config.yaml
[02/07 16:43:53] mydl INFO: Model:
DataParallel(
  (module): NetWrapper(
    (backbone): ResNet18MaxAvgProtein(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer2): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer3): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer4): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Sequential(
        (bn1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop1): Dropout(p=0.5, inplace=False)
        (linear1): Linear(in_features=1024, out_features=512, bias=True)
        (relu1): ReLU()
        (bn2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop2): Dropout(p=0.5, inplace=False)
        (linear2): Linear(in_features=512, out_features=28, bias=True)
      )
      (conv1_y): Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
      (ada_avgpool): AdaptiveAvgPool2d(output_size=1)
      (ada_maxpool): AdaptiveMaxPool2d(output_size=1)
    )
  )
)
[02/11 10:07:14] mydl INFO: Rank of current process: 0. World size: 1
[02/11 10:07:14] mydl INFO: Environment info:
----------------------  ---------------------------------------------------------
sys.platform            linux
Python                  3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]
numpy                   1.17.3
mydl                    0.1 @/w/mydl_demo/mydl
mydl compiler           GCC 7.4
mydl CUDA compiler      10.1
mydl arch flags         sm_75
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.3.1 @/usr/local/lib/python3.6/dist-packages/torch
PyTorch debug build     False
CUDA available          True
GPU 0                   GeForce RTX 2080 Ti
CUDA_HOME               /usr/local/cuda
NVCC                    Cuda compilation tools, release 10.1, V10.1.243
Pillow                  6.1.0.post0
torchvision             0.4.2 @/usr/local/lib/python3.6/dist-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75
cv2                     4.1.2
----------------------  ---------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.20.5 (Git Hash 0125f28c61c1f822fd48570b4c1066f96fcb9b2e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.1
  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=True, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

[02/11 10:07:14] mydl INFO: Command line arguments: Namespace(config_file='/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml', dist_url=None, eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[02/11 10:07:14] mydl INFO: Contents of args.config_file=/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml:
INPUT:
  MIN_SIZE_TRAIN: 512
  MAX_SIZE_TRAIN: 512

DATASETS:
  TRAIN_ROOT: "datasets/train"
  TRAIN_LABEL: "datasets/train_split_0.csv"
  VALID_ROOT: "datasets/train"
  VALID_LABEL: "datasets/valid_split_0.csv"

MODEL:
  NAME: "resnet18_maxavg"
  WEIGHT: ""
  LOSS: "macro f1"
  META_ARCHITECTURE: "ProteinResnet"

DATALOADER:
  SAMPLER_WEIGHTS: "datasets/train_split_0_weights.pickle"
  SAMPLER: "weighted"
  AUGMENT: "heavy"

SOLVER:
  OPTIMIZER: "sgd"
  SCHEDULER: "StepLR"
  STEP_SIZE: 8
  FINETUNE: "on"
  TRAIN_EPOCH: 100
  BASE_LR: 0.04
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128

TEST:
  IMS_PER_BATCH: 64
  TTA: 'on'

OUTPUT_DIR: "dump/res18_cv0"
VERSION: 1

[02/11 10:07:14] mydl INFO: Running with full config:
DATALOADER:
  AUGMENT: heavy
  NUM_WORKERS: 8
  SAMPLER: weighted
  SAMPLER_WEIGHTS: datasets/train_split_0_weights.pickle
  SIZE_DIVISIBILITY: 0
DATASETS:
  TEST: test
  TEST_LABEL: kaggle/sample_submission.csv
  TEST_ROOT: kaggle/test
  TRAIN: train
  TRAIN_LABEL: datasets/train_split_0.csv
  TRAIN_ROOT: datasets/train
  VALID: valid
  VALID_LABEL: datasets/valid_split_0.csv
  VALID_ROOT: datasets/train
INPUT:
  MAX_SIZE_TEST: 512
  MAX_SIZE_TRAIN: 512
  MIN_SIZE_TEST: 512
  MIN_SIZE_TRAIN: 512
  TEST_PIXEL_MEAN: [0.0591, 0.0453, 0.0407, 0.0592]
  TEST_PIXEL_STD: [0.1037, 0.0798, 0.1066, 0.0988]
  TRAIN_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  TRAIN_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
  VALID_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  VALID_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
MODEL:
  DEVICE: cuda
  LOSS: macro f1
  LOSS_WEIGHT: [1.0, 3.28, 2.03, 3.19, 2.77, 2.61, 3.08, 2.17, 5.94, 6.01, 6.08, 3.64, 3.62, 4.03, 3.45, 7.15, 4.16, 5.23, 3.77, 3.12, 5.25, 1.8, 3.41, 2.08, 5.23, 1.0, 4.75, 6.44]
  META_ARCHITECTURE: ProteinResnet
  NAME: resnet18_maxavg
  NUM_CLASS: 28
  WEIGHT: 
OUTPUT_DIR: dump/res18_cv0
SOLVER:
  BASE_LR: 0.04
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 10
  FINETUNE: on
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128
  MIXUP: off
  MOMENTUM: 0.9
  OPTIMIZER: sgd
  PATIENCE: 10
  SCHEDULER: StepLR
  STEPS: (10, 20, 30, 40, 50, 60, 70, 80, 90)
  STEP_SIZE: 8
  TRAIN_EPOCH: 100
  T_MAX: 10
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 64
  TTA: on
VERSION: 1
[02/11 10:07:14] mydl INFO: Full config saved to /w/mydl_demo/dump/res18_cv0/config.yaml
[02/11 10:07:16] mydl INFO: Model:
DataParallel(
  (module): NetWrapper(
    (backbone): ResNet18MaxAvgProtein(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer2): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer3): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer4): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Sequential(
        (bn1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop1): Dropout(p=0.5, inplace=False)
        (linear1): Linear(in_features=1024, out_features=512, bias=True)
        (relu1): ReLU()
        (bn2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop2): Dropout(p=0.5, inplace=False)
        (linear2): Linear(in_features=512, out_features=28, bias=True)
      )
      (conv1_y): Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
      (ada_avgpool): AdaptiveAvgPool2d(output_size=1)
      (ada_maxpool): AdaptiveMaxPool2d(output_size=1)
    )
  )
)
[02/15 16:47:03] mydl INFO: Rank of current process: 0. World size: 1
[02/15 16:47:03] mydl INFO: Environment info:
----------------------  ---------------------------------------------------------
sys.platform            linux
Python                  3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]
numpy                   1.17.3
mydl                    0.1 @/w/mydl_demo/mydl
mydl compiler           GCC 7.4
mydl CUDA compiler      10.1
mydl arch flags         sm_75
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.3.1 @/usr/local/lib/python3.6/dist-packages/torch
PyTorch debug build     False
CUDA available          True
GPU 0                   GeForce RTX 2080 Ti
CUDA_HOME               /usr/local/cuda
NVCC                    Cuda compilation tools, release 10.1, V10.1.243
Pillow                  6.1.0.post0
torchvision             0.4.2 @/usr/local/lib/python3.6/dist-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75
cv2                     4.1.2
----------------------  ---------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.20.5 (Git Hash 0125f28c61c1f822fd48570b4c1066f96fcb9b2e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.1
  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=True, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

[02/15 16:47:03] mydl INFO: Command line arguments: Namespace(config_file='/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml', dist_url=None, eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[02/15 16:47:03] mydl INFO: Contents of args.config_file=/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml:
INPUT:
  MIN_SIZE_TRAIN: 512
  MAX_SIZE_TRAIN: 512

DATASETS:
  TRAIN_ROOT: "datasets/train"
  TRAIN_LABEL: "datasets/train_split_0.csv"
  VALID_ROOT: "datasets/train"
  VALID_LABEL: "datasets/valid_split_0.csv"

MODEL:
  NAME: "resnet18_maxavg"
  WEIGHT: ""
  LOSS: "macro f1"
  META_ARCHITECTURE: "ProteinResnet"

DATALOADER:
  SAMPLER_WEIGHTS: "datasets/train_split_0_weights.pickle"
  SAMPLER: "weighted"
  AUGMENT: "heavy"

SOLVER:
  OPTIMIZER: "sgd"
  SCHEDULER: "StepLR"
  STEP_SIZE: 8
  FINETUNE: "on"
  TRAIN_EPOCH: 100
  BASE_LR: 0.04
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128

TEST:
  IMS_PER_BATCH: 64
  TTA: 'on'

OUTPUT_DIR: "dump/res18_cv0"
VERSION: 1

[02/15 16:47:03] mydl INFO: Running with full config:
DATALOADER:
  AUGMENT: heavy
  NUM_WORKERS: 8
  SAMPLER: weighted
  SAMPLER_WEIGHTS: datasets/train_split_0_weights.pickle
  SIZE_DIVISIBILITY: 0
DATASETS:
  TEST: test
  TEST_LABEL: kaggle/sample_submission.csv
  TEST_ROOT: kaggle/test
  TRAIN: train
  TRAIN_LABEL: datasets/train_split_0.csv
  TRAIN_ROOT: datasets/train
  VALID: valid
  VALID_LABEL: datasets/valid_split_0.csv
  VALID_ROOT: datasets/train
INPUT:
  MAX_SIZE_TEST: 512
  MAX_SIZE_TRAIN: 512
  MIN_SIZE_TEST: 512
  MIN_SIZE_TRAIN: 512
  TEST_PIXEL_MEAN: [0.0591, 0.0453, 0.0407, 0.0592]
  TEST_PIXEL_STD: [0.1037, 0.0798, 0.1066, 0.0988]
  TRAIN_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  TRAIN_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
  VALID_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  VALID_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
MODEL:
  DEVICE: cuda
  LOSS: macro f1
  LOSS_WEIGHT: [1.0, 3.28, 2.03, 3.19, 2.77, 2.61, 3.08, 2.17, 5.94, 6.01, 6.08, 3.64, 3.62, 4.03, 3.45, 7.15, 4.16, 5.23, 3.77, 3.12, 5.25, 1.8, 3.41, 2.08, 5.23, 1.0, 4.75, 6.44]
  META_ARCHITECTURE: ProteinResnet
  NAME: resnet18_maxavg
  NUM_CLASS: 28
  WEIGHT: 
OUTPUT_DIR: dump/res18_cv0
SOLVER:
  BASE_LR: 0.04
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 10
  FINETUNE: on
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128
  MIXUP: off
  MOMENTUM: 0.9
  OPTIMIZER: sgd
  PATIENCE: 10
  SCHEDULER: StepLR
  STEPS: (10, 20, 30, 40, 50, 60, 70, 80, 90)
  STEP_SIZE: 8
  TRAIN_EPOCH: 100
  T_MAX: 10
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 64
  TTA: on
VERSION: 1
[02/15 16:47:03] mydl INFO: Full config saved to /w/mydl_demo/dump/res18_cv0/config.yaml
[02/15 16:47:05] mydl INFO: Model:
DataParallel(
  (module): NetWrapper(
    (backbone): ResNet18MaxAvgProtein(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer2): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer3): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer4): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Sequential(
        (bn1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop1): Dropout(p=0.5, inplace=False)
        (linear1): Linear(in_features=1024, out_features=512, bias=True)
        (relu1): ReLU()
        (bn2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop2): Dropout(p=0.5, inplace=False)
        (linear2): Linear(in_features=512, out_features=28, bias=True)
      )
      (conv1_y): Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
      (ada_avgpool): AdaptiveAvgPool2d(output_size=1)
      (ada_maxpool): AdaptiveMaxPool2d(output_size=1)
    )
  )
)
[02/15 17:10:10] mydl INFO: Rank of current process: 0. World size: 1
[02/15 17:10:10] mydl INFO: Environment info:
----------------------  ---------------------------------------------------------
sys.platform            linux
Python                  3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]
numpy                   1.17.3
mydl                    0.1 @/w/mydl_demo/mydl
mydl compiler           GCC 7.4
mydl CUDA compiler      10.1
mydl arch flags         sm_75
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.3.1 @/usr/local/lib/python3.6/dist-packages/torch
PyTorch debug build     False
CUDA available          True
GPU 0                   GeForce RTX 2080 Ti
CUDA_HOME               /usr/local/cuda
NVCC                    Cuda compilation tools, release 10.1, V10.1.243
Pillow                  6.1.0.post0
torchvision             0.4.2 @/usr/local/lib/python3.6/dist-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75
cv2                     4.1.2
----------------------  ---------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.20.5 (Git Hash 0125f28c61c1f822fd48570b4c1066f96fcb9b2e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.1
  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=True, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

[02/15 17:10:10] mydl INFO: Command line arguments: Namespace(config_file='/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml', dist_url=None, eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[02/15 17:10:10] mydl INFO: Contents of args.config_file=/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml:
INPUT:
  MIN_SIZE_TRAIN: 512
  MAX_SIZE_TRAIN: 512

DATASETS:
  TRAIN_ROOT: "datasets/train"
  TRAIN_LABEL: "datasets/train_split_0.csv"
  VALID_ROOT: "datasets/train"
  VALID_LABEL: "datasets/valid_split_0.csv"

MODEL:
  NAME: "resnet18_maxavg"
  WEIGHT: ""
  LOSS: "macro f1"
  META_ARCHITECTURE: "ProteinResnet"

DATALOADER:
  SAMPLER_WEIGHTS: "datasets/train_split_0_weights.pickle"
  SAMPLER: "weighted"
  AUGMENT: "heavy"

SOLVER:
  OPTIMIZER: "sgd"
  SCHEDULER: "StepLR"
  STEP_SIZE: 8
  FINETUNE: "on"
  TRAIN_EPOCH: 100
  BASE_LR: 0.04
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128

TEST:
  IMS_PER_BATCH: 64
  TTA: 'on'

OUTPUT_DIR: "dump/res18_cv0"
VERSION: 1

[02/15 17:10:10] mydl INFO: Running with full config:
DATALOADER:
  AUGMENT: heavy
  NUM_WORKERS: 8
  SAMPLER: weighted
  SAMPLER_WEIGHTS: datasets/train_split_0_weights.pickle
  SIZE_DIVISIBILITY: 0
DATASETS:
  TEST: test
  TEST_LABEL: kaggle/sample_submission.csv
  TEST_ROOT: kaggle/test
  TRAIN: train
  TRAIN_LABEL: datasets/train_split_0.csv
  TRAIN_ROOT: datasets/train
  VALID: valid
  VALID_LABEL: datasets/valid_split_0.csv
  VALID_ROOT: datasets/train
INPUT:
  MAX_SIZE_TEST: 512
  MAX_SIZE_TRAIN: 512
  MIN_SIZE_TEST: 512
  MIN_SIZE_TRAIN: 512
  TEST_PIXEL_MEAN: [0.0591, 0.0453, 0.0407, 0.0592]
  TEST_PIXEL_STD: [0.1037, 0.0798, 0.1066, 0.0988]
  TRAIN_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  TRAIN_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
  VALID_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  VALID_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
MODEL:
  DEVICE: cuda
  LOSS: macro f1
  LOSS_WEIGHT: [1.0, 3.28, 2.03, 3.19, 2.77, 2.61, 3.08, 2.17, 5.94, 6.01, 6.08, 3.64, 3.62, 4.03, 3.45, 7.15, 4.16, 5.23, 3.77, 3.12, 5.25, 1.8, 3.41, 2.08, 5.23, 1.0, 4.75, 6.44]
  META_ARCHITECTURE: ProteinResnet
  NAME: resnet18_maxavg
  NUM_CLASS: 28
  WEIGHT: 
OUTPUT_DIR: dump/res18_cv0
SOLVER:
  BASE_LR: 0.04
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 10
  FINETUNE: on
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128
  MIXUP: off
  MOMENTUM: 0.9
  OPTIMIZER: sgd
  PATIENCE: 10
  SCHEDULER: StepLR
  STEPS: (10, 20, 30, 40, 50, 60, 70, 80, 90)
  STEP_SIZE: 8
  TRAIN_EPOCH: 100
  T_MAX: 10
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 64
  TTA: on
VERSION: 1
[02/15 17:10:10] mydl INFO: Full config saved to /w/mydl_demo/dump/res18_cv0/config.yaml
[02/15 17:10:12] mydl INFO: Model:
DataParallel(
  (module): NetWrapper(
    (backbone): ResNet18MaxAvgProtein(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer2): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer3): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer4): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Sequential(
        (bn1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop1): Dropout(p=0.5, inplace=False)
        (linear1): Linear(in_features=1024, out_features=512, bias=True)
        (relu1): ReLU()
        (bn2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop2): Dropout(p=0.5, inplace=False)
        (linear2): Linear(in_features=512, out_features=28, bias=True)
      )
      (conv1_y): Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
      (ada_avgpool): AdaptiveAvgPool2d(output_size=1)
      (ada_maxpool): AdaptiveMaxPool2d(output_size=1)
    )
  )
)
[02/15 17:39:53] mydl INFO: Rank of current process: 0. World size: 1
[02/15 17:39:53] mydl INFO: Environment info:
----------------------  ---------------------------------------------------------
sys.platform            linux
Python                  3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]
numpy                   1.17.3
mydl                    0.1 @/w/mydl_demo/mydl
mydl compiler           GCC 7.4
mydl CUDA compiler      10.1
mydl arch flags         sm_75
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.3.1 @/usr/local/lib/python3.6/dist-packages/torch
PyTorch debug build     False
CUDA available          True
GPU 0                   GeForce RTX 2080 Ti
CUDA_HOME               /usr/local/cuda
NVCC                    Cuda compilation tools, release 10.1, V10.1.243
Pillow                  6.1.0.post0
torchvision             0.4.2 @/usr/local/lib/python3.6/dist-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75
cv2                     4.1.2
----------------------  ---------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.20.5 (Git Hash 0125f28c61c1f822fd48570b4c1066f96fcb9b2e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.1
  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=True, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

[02/15 17:39:53] mydl INFO: Command line arguments: Namespace(config_file='/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml', dist_url=None, eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[02/15 17:39:53] mydl INFO: Contents of args.config_file=/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml:
INPUT:
  MIN_SIZE_TRAIN: 512
  MAX_SIZE_TRAIN: 512

DATASETS:
  TRAIN_ROOT: "datasets/train"
  TRAIN_LABEL: "datasets/train_split_0.csv"
  VALID_ROOT: "datasets/train"
  VALID_LABEL: "datasets/valid_split_0.csv"

MODEL:
  NAME: "resnet18_maxavg"
  WEIGHT: ""
  LOSS: "macro f1"
  META_ARCHITECTURE: "ProteinResnet"

DATALOADER:
  SAMPLER_WEIGHTS: "datasets/train_split_0_weights.pickle"
  SAMPLER: "weighted"
  AUGMENT: "heavy"

SOLVER:
  OPTIMIZER: "sgd"
  SCHEDULER: "StepLR"
  STEP_SIZE: 8
  FINETUNE: "on"
  TRAIN_EPOCH: 100
  BASE_LR: 0.04
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128

TEST:
  IMS_PER_BATCH: 64
  TTA: 'on'

OUTPUT_DIR: "dump/res18_cv0"
VERSION: 1

[02/15 17:39:53] mydl INFO: Running with full config:
DATALOADER:
  AUGMENT: heavy
  NUM_WORKERS: 8
  SAMPLER: weighted
  SAMPLER_WEIGHTS: datasets/train_split_0_weights.pickle
  SIZE_DIVISIBILITY: 0
DATASETS:
  TEST: test
  TEST_LABEL: kaggle/sample_submission.csv
  TEST_ROOT: kaggle/test
  TRAIN: train
  TRAIN_LABEL: datasets/train_split_0.csv
  TRAIN_ROOT: datasets/train
  VALID: valid
  VALID_LABEL: datasets/valid_split_0.csv
  VALID_ROOT: datasets/train
INPUT:
  MAX_SIZE_TEST: 512
  MAX_SIZE_TRAIN: 512
  MIN_SIZE_TEST: 512
  MIN_SIZE_TRAIN: 512
  TEST_PIXEL_MEAN: [0.0591, 0.0453, 0.0407, 0.0592]
  TEST_PIXEL_STD: [0.1037, 0.0798, 0.1066, 0.0988]
  TRAIN_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  TRAIN_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
  VALID_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  VALID_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
MODEL:
  DEVICE: cuda
  LOSS: macro f1
  LOSS_WEIGHT: [1.0, 3.28, 2.03, 3.19, 2.77, 2.61, 3.08, 2.17, 5.94, 6.01, 6.08, 3.64, 3.62, 4.03, 3.45, 7.15, 4.16, 5.23, 3.77, 3.12, 5.25, 1.8, 3.41, 2.08, 5.23, 1.0, 4.75, 6.44]
  META_ARCHITECTURE: ProteinResnet
  NAME: resnet18_maxavg
  NUM_CLASS: 28
  WEIGHT: 
OUTPUT_DIR: dump/res18_cv0
SOLVER:
  BASE_LR: 0.04
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 10
  FINETUNE: on
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128
  MIXUP: off
  MOMENTUM: 0.9
  OPTIMIZER: sgd
  PATIENCE: 10
  SCHEDULER: StepLR
  STEPS: (10, 20, 30, 40, 50, 60, 70, 80, 90)
  STEP_SIZE: 8
  TRAIN_EPOCH: 100
  T_MAX: 10
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 64
  TTA: on
VERSION: 1
[02/15 17:39:53] mydl INFO: Full config saved to /w/mydl_demo/dump/res18_cv0/config.yaml
[02/15 17:39:55] mydl INFO: Model:
DataParallel(
  (module): NetWrapper(
    (backbone): ResNet18MaxAvgProtein(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer2): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer3): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer4): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Sequential(
        (bn1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop1): Dropout(p=0.5, inplace=False)
        (linear1): Linear(in_features=1024, out_features=512, bias=True)
        (relu1): ReLU()
        (bn2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop2): Dropout(p=0.5, inplace=False)
        (linear2): Linear(in_features=512, out_features=28, bias=True)
      )
      (conv1_y): Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
      (ada_avgpool): AdaptiveAvgPool2d(output_size=1)
      (ada_maxpool): AdaptiveMaxPool2d(output_size=1)
    )
  )
)
[02/15 18:36:10] mydl INFO: Rank of current process: 0. World size: 1
[02/15 18:36:10] mydl INFO: Environment info:
----------------------  ---------------------------------------------------------
sys.platform            linux
Python                  3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]
numpy                   1.17.3
mydl                    0.1 @/w/mydl_demo/mydl
mydl compiler           GCC 7.4
mydl CUDA compiler      10.1
mydl arch flags         sm_75
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.3.1 @/usr/local/lib/python3.6/dist-packages/torch
PyTorch debug build     False
CUDA available          True
GPU 0                   GeForce RTX 2080 Ti
CUDA_HOME               /usr/local/cuda
NVCC                    Cuda compilation tools, release 10.1, V10.1.243
Pillow                  6.1.0.post0
torchvision             0.4.2 @/usr/local/lib/python3.6/dist-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75
cv2                     4.1.2
----------------------  ---------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.20.5 (Git Hash 0125f28c61c1f822fd48570b4c1066f96fcb9b2e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.1
  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=True, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

[02/15 18:36:10] mydl INFO: Command line arguments: Namespace(config_file='/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml', dist_url=None, eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[02/15 18:36:10] mydl INFO: Contents of args.config_file=/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml:
INPUT:
  MIN_SIZE_TRAIN: 512
  MAX_SIZE_TRAIN: 512

DATASETS:
  TRAIN_ROOT: "datasets/train"
  TRAIN_LABEL: "datasets/train_split_0.csv"
  VALID_ROOT: "datasets/train"
  VALID_LABEL: "datasets/valid_split_0.csv"

MODEL:
  NAME: "resnet18_maxavg"
  WEIGHT: ""
  LOSS: "macro f1"
  META_ARCHITECTURE: "ProteinResnet"

DATALOADER:
  SAMPLER_WEIGHTS: "datasets/train_split_0_weights.pickle"
  SAMPLER: "weighted"
  AUGMENT: "heavy"

SOLVER:
  OPTIMIZER: "sgd"
  SCHEDULER: "StepLR"
  STEP_SIZE: 8
  FINETUNE: "on"
  TRAIN_EPOCH: 100
  BASE_LR: 0.04
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128

TEST:
  IMS_PER_BATCH: 64
  TTA: 'on'

OUTPUT_DIR: "dump/res18_cv0"
VERSION: 1

[02/15 18:36:10] mydl INFO: Running with full config:
DATALOADER:
  AUGMENT: heavy
  NUM_WORKERS: 8
  SAMPLER: weighted
  SAMPLER_WEIGHTS: datasets/train_split_0_weights.pickle
  SIZE_DIVISIBILITY: 0
DATASETS:
  TEST: test
  TEST_LABEL: kaggle/sample_submission.csv
  TEST_ROOT: kaggle/test
  TRAIN: train
  TRAIN_LABEL: datasets/train_split_0.csv
  TRAIN_ROOT: datasets/train
  VALID: valid
  VALID_LABEL: datasets/valid_split_0.csv
  VALID_ROOT: datasets/train
INPUT:
  MAX_SIZE_TEST: 512
  MAX_SIZE_TRAIN: 512
  MIN_SIZE_TEST: 512
  MIN_SIZE_TRAIN: 512
  TEST_PIXEL_MEAN: [0.0591, 0.0453, 0.0407, 0.0592]
  TEST_PIXEL_STD: [0.1037, 0.0798, 0.1066, 0.0988]
  TRAIN_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  TRAIN_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
  VALID_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  VALID_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
MODEL:
  DEVICE: cuda
  LOSS: macro f1
  LOSS_WEIGHT: [1.0, 3.28, 2.03, 3.19, 2.77, 2.61, 3.08, 2.17, 5.94, 6.01, 6.08, 3.64, 3.62, 4.03, 3.45, 7.15, 4.16, 5.23, 3.77, 3.12, 5.25, 1.8, 3.41, 2.08, 5.23, 1.0, 4.75, 6.44]
  META_ARCHITECTURE: ProteinResnet
  NAME: resnet18_maxavg
  NUM_CLASS: 28
  WEIGHT: 
OUTPUT_DIR: dump/res18_cv0
SOLVER:
  BASE_LR: 0.04
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 10
  FINETUNE: on
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128
  MIXUP: off
  MOMENTUM: 0.9
  OPTIMIZER: sgd
  PATIENCE: 10
  SCHEDULER: StepLR
  STEPS: (10, 20, 30, 40, 50, 60, 70, 80, 90)
  STEP_SIZE: 8
  TRAIN_EPOCH: 100
  T_MAX: 10
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 64
  TTA: on
VERSION: 1
[02/15 18:36:10] mydl INFO: Full config saved to /w/mydl_demo/dump/res18_cv0/config.yaml
[02/15 18:36:12] mydl INFO: Model:
DataParallel(
  (module): NetWrapper(
    (backbone): ResNet18MaxAvgProtein(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer2): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer3): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer4): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Sequential(
        (bn1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop1): Dropout(p=0.5, inplace=False)
        (linear1): Linear(in_features=1024, out_features=512, bias=True)
        (relu1): ReLU()
        (bn2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop2): Dropout(p=0.5, inplace=False)
        (linear2): Linear(in_features=512, out_features=28, bias=True)
      )
      (conv1_y): Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
      (ada_avgpool): AdaptiveAvgPool2d(output_size=1)
      (ada_maxpool): AdaptiveMaxPool2d(output_size=1)
    )
  )
)
[02/15 18:36:53] mydl INFO: Rank of current process: 0. World size: 1
[02/15 18:36:54] mydl INFO: Environment info:
----------------------  ---------------------------------------------------------
sys.platform            linux
Python                  3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]
numpy                   1.17.3
mydl                    0.1 @/w/mydl_demo/mydl
mydl compiler           GCC 7.4
mydl CUDA compiler      10.1
mydl arch flags         sm_75
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.3.1 @/usr/local/lib/python3.6/dist-packages/torch
PyTorch debug build     False
CUDA available          True
GPU 0                   GeForce RTX 2080 Ti
CUDA_HOME               /usr/local/cuda
NVCC                    Cuda compilation tools, release 10.1, V10.1.243
Pillow                  6.1.0.post0
torchvision             0.4.2 @/usr/local/lib/python3.6/dist-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75
cv2                     4.1.2
----------------------  ---------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.20.5 (Git Hash 0125f28c61c1f822fd48570b4c1066f96fcb9b2e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.1
  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=True, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

[02/15 18:36:54] mydl INFO: Command line arguments: Namespace(config_file='/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml', dist_url=None, eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[02/15 18:36:54] mydl INFO: Contents of args.config_file=/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml:
INPUT:
  MIN_SIZE_TRAIN: 512
  MAX_SIZE_TRAIN: 512

DATASETS:
  TRAIN_ROOT: "datasets/train"
  TRAIN_LABEL: "datasets/train_split_0.csv"
  VALID_ROOT: "datasets/train"
  VALID_LABEL: "datasets/valid_split_0.csv"

MODEL:
  NAME: "resnet18_maxavg"
  WEIGHT: ""
  LOSS: "macro f1"
  META_ARCHITECTURE: "ProteinResnet"

DATALOADER:
  SAMPLER_WEIGHTS: "datasets/train_split_0_weights.pickle"
  SAMPLER: "weighted"
  AUGMENT: "heavy"

SOLVER:
  OPTIMIZER: "sgd"
  SCHEDULER: "StepLR"
  STEP_SIZE: 8
  FINETUNE: "on"
  TRAIN_EPOCH: 100
  BASE_LR: 0.04
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128

TEST:
  IMS_PER_BATCH: 64
  TTA: 'on'

OUTPUT_DIR: "dump/res18_cv0"
VERSION: 1

[02/15 18:36:54] mydl INFO: Running with full config:
DATALOADER:
  AUGMENT: heavy
  NUM_WORKERS: 8
  SAMPLER: weighted
  SAMPLER_WEIGHTS: datasets/train_split_0_weights.pickle
  SIZE_DIVISIBILITY: 0
DATASETS:
  TEST: test
  TEST_LABEL: kaggle/sample_submission.csv
  TEST_ROOT: kaggle/test
  TRAIN: train
  TRAIN_LABEL: datasets/train_split_0.csv
  TRAIN_ROOT: datasets/train
  VALID: valid
  VALID_LABEL: datasets/valid_split_0.csv
  VALID_ROOT: datasets/train
INPUT:
  MAX_SIZE_TEST: 512
  MAX_SIZE_TRAIN: 512
  MIN_SIZE_TEST: 512
  MIN_SIZE_TRAIN: 512
  TEST_PIXEL_MEAN: [0.0591, 0.0453, 0.0407, 0.0592]
  TEST_PIXEL_STD: [0.1037, 0.0798, 0.1066, 0.0988]
  TRAIN_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  TRAIN_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
  VALID_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  VALID_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
MODEL:
  DEVICE: cuda
  LOSS: macro f1
  LOSS_WEIGHT: [1.0, 3.28, 2.03, 3.19, 2.77, 2.61, 3.08, 2.17, 5.94, 6.01, 6.08, 3.64, 3.62, 4.03, 3.45, 7.15, 4.16, 5.23, 3.77, 3.12, 5.25, 1.8, 3.41, 2.08, 5.23, 1.0, 4.75, 6.44]
  META_ARCHITECTURE: ProteinResnet
  NAME: resnet18_maxavg
  NUM_CLASS: 28
  WEIGHT: 
OUTPUT_DIR: dump/res18_cv0
SOLVER:
  BASE_LR: 0.04
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 10
  FINETUNE: on
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128
  MIXUP: off
  MOMENTUM: 0.9
  OPTIMIZER: sgd
  PATIENCE: 10
  SCHEDULER: StepLR
  STEPS: (10, 20, 30, 40, 50, 60, 70, 80, 90)
  STEP_SIZE: 8
  TRAIN_EPOCH: 100
  T_MAX: 10
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 64
  TTA: on
VERSION: 1
[02/15 18:36:54] mydl INFO: Full config saved to /w/mydl_demo/dump/res18_cv0/config.yaml
[02/15 18:36:55] mydl INFO: Model:
DataParallel(
  (module): NetWrapper(
    (backbone): ResNet18MaxAvgProtein(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer2): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer3): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer4): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Sequential(
        (bn1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop1): Dropout(p=0.5, inplace=False)
        (linear1): Linear(in_features=1024, out_features=512, bias=True)
        (relu1): ReLU()
        (bn2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop2): Dropout(p=0.5, inplace=False)
        (linear2): Linear(in_features=512, out_features=28, bias=True)
      )
      (conv1_y): Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
      (ada_avgpool): AdaptiveAvgPool2d(output_size=1)
      (ada_maxpool): AdaptiveMaxPool2d(output_size=1)
    )
  )
)
[02/15 18:40:16] mydl INFO: Rank of current process: 0. World size: 1
[02/15 18:40:16] mydl INFO: Environment info:
----------------------  ---------------------------------------------------------
sys.platform            linux
Python                  3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]
numpy                   1.17.3
mydl                    0.1 @/w/mydl_demo/mydl
mydl compiler           GCC 7.4
mydl CUDA compiler      10.1
mydl arch flags         sm_75
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.3.1 @/usr/local/lib/python3.6/dist-packages/torch
PyTorch debug build     False
CUDA available          True
GPU 0                   GeForce RTX 2080 Ti
CUDA_HOME               /usr/local/cuda
NVCC                    Cuda compilation tools, release 10.1, V10.1.243
Pillow                  6.1.0.post0
torchvision             0.4.2 @/usr/local/lib/python3.6/dist-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75
cv2                     4.1.2
----------------------  ---------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.20.5 (Git Hash 0125f28c61c1f822fd48570b4c1066f96fcb9b2e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.1
  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=True, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

[02/15 18:40:16] mydl INFO: Command line arguments: Namespace(config_file='/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml', dist_url=None, eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[02/15 18:40:16] mydl INFO: Contents of args.config_file=/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml:
INPUT:
  MIN_SIZE_TRAIN: 512
  MAX_SIZE_TRAIN: 512

DATASETS:
  TRAIN_ROOT: "datasets/train"
  TRAIN_LABEL: "datasets/train_split_0.csv"
  VALID_ROOT: "datasets/train"
  VALID_LABEL: "datasets/valid_split_0.csv"

MODEL:
  NAME: "resnet18_maxavg"
  WEIGHT: ""
  LOSS: "macro f1"
  META_ARCHITECTURE: "ProteinResnet"

DATALOADER:
  SAMPLER_WEIGHTS: "datasets/train_split_0_weights.pickle"
  SAMPLER: "weighted"
  AUGMENT: "heavy"

SOLVER:
  OPTIMIZER: "sgd"
  SCHEDULER: "StepLR"
  STEP_SIZE: 8
  FINETUNE: "on"
  TRAIN_EPOCH: 100
  BASE_LR: 0.04
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128

TEST:
  IMS_PER_BATCH: 64
  TTA: 'on'

OUTPUT_DIR: "dump/res18_cv0"
VERSION: 1

[02/15 18:40:16] mydl INFO: Running with full config:
DATALOADER:
  AUGMENT: heavy
  NUM_WORKERS: 8
  SAMPLER: weighted
  SAMPLER_WEIGHTS: datasets/train_split_0_weights.pickle
  SIZE_DIVISIBILITY: 0
DATASETS:
  TEST: test
  TEST_LABEL: kaggle/sample_submission.csv
  TEST_ROOT: kaggle/test
  TRAIN: train
  TRAIN_LABEL: datasets/train_split_0.csv
  TRAIN_ROOT: datasets/train
  VALID: valid
  VALID_LABEL: datasets/valid_split_0.csv
  VALID_ROOT: datasets/train
INPUT:
  MAX_SIZE_TEST: 512
  MAX_SIZE_TRAIN: 512
  MIN_SIZE_TEST: 512
  MIN_SIZE_TRAIN: 512
  TEST_PIXEL_MEAN: [0.0591, 0.0453, 0.0407, 0.0592]
  TEST_PIXEL_STD: [0.1037, 0.0798, 0.1066, 0.0988]
  TRAIN_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  TRAIN_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
  VALID_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  VALID_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
MODEL:
  DEVICE: cuda
  LOSS: macro f1
  LOSS_WEIGHT: [1.0, 3.28, 2.03, 3.19, 2.77, 2.61, 3.08, 2.17, 5.94, 6.01, 6.08, 3.64, 3.62, 4.03, 3.45, 7.15, 4.16, 5.23, 3.77, 3.12, 5.25, 1.8, 3.41, 2.08, 5.23, 1.0, 4.75, 6.44]
  META_ARCHITECTURE: ProteinResnet
  NAME: resnet18_maxavg
  NUM_CLASS: 28
  WEIGHT: 
OUTPUT_DIR: dump/res18_cv0
SOLVER:
  BASE_LR: 0.04
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 10
  FINETUNE: on
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128
  MIXUP: off
  MOMENTUM: 0.9
  OPTIMIZER: sgd
  PATIENCE: 10
  SCHEDULER: StepLR
  STEPS: (10, 20, 30, 40, 50, 60, 70, 80, 90)
  STEP_SIZE: 8
  TRAIN_EPOCH: 100
  T_MAX: 10
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 64
  TTA: on
VERSION: 1
[02/15 18:40:16] mydl INFO: Full config saved to /w/mydl_demo/dump/res18_cv0/config.yaml
[02/15 18:40:18] mydl INFO: Model:
DataParallel(
  (module): NetWrapper(
    (backbone): ResNet18MaxAvgProtein(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer2): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer3): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer4): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Sequential(
        (bn1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop1): Dropout(p=0.5, inplace=False)
        (linear1): Linear(in_features=1024, out_features=512, bias=True)
        (relu1): ReLU()
        (bn2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop2): Dropout(p=0.5, inplace=False)
        (linear2): Linear(in_features=512, out_features=28, bias=True)
      )
      (conv1_y): Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
      (ada_avgpool): AdaptiveAvgPool2d(output_size=1)
      (ada_maxpool): AdaptiveMaxPool2d(output_size=1)
    )
  )
)
[02/15 18:41:26] mydl INFO: Rank of current process: 0. World size: 1
[02/15 18:41:27] mydl INFO: Environment info:
----------------------  ---------------------------------------------------------
sys.platform            linux
Python                  3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]
numpy                   1.17.3
mydl                    0.1 @/w/mydl_demo/mydl
mydl compiler           GCC 7.4
mydl CUDA compiler      10.1
mydl arch flags         sm_75
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.3.1 @/usr/local/lib/python3.6/dist-packages/torch
PyTorch debug build     False
CUDA available          True
GPU 0                   GeForce RTX 2080 Ti
CUDA_HOME               /usr/local/cuda
NVCC                    Cuda compilation tools, release 10.1, V10.1.243
Pillow                  6.1.0.post0
torchvision             0.4.2 @/usr/local/lib/python3.6/dist-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75
cv2                     4.1.2
----------------------  ---------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.20.5 (Git Hash 0125f28c61c1f822fd48570b4c1066f96fcb9b2e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.1
  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=True, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

[02/15 18:41:27] mydl INFO: Command line arguments: Namespace(config_file='/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml', dist_url=None, eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[02/15 18:41:27] mydl INFO: Contents of args.config_file=/w/mydl_demo/mydl/engine/../arg/configs/default/human_protein.yaml:
INPUT:
  MIN_SIZE_TRAIN: 512
  MAX_SIZE_TRAIN: 512

DATASETS:
  TRAIN_ROOT: "datasets/train"
  TRAIN_LABEL: "datasets/train_split_0.csv"
  VALID_ROOT: "datasets/train"
  VALID_LABEL: "datasets/valid_split_0.csv"

MODEL:
  NAME: "resnet18_maxavg"
  WEIGHT: ""
  LOSS: "macro f1"
  META_ARCHITECTURE: "ProteinResnet"

DATALOADER:
  SAMPLER_WEIGHTS: "datasets/train_split_0_weights.pickle"
  SAMPLER: "weighted"
  AUGMENT: "heavy"

SOLVER:
  OPTIMIZER: "sgd"
  SCHEDULER: "StepLR"
  STEP_SIZE: 8
  FINETUNE: "on"
  TRAIN_EPOCH: 100
  BASE_LR: 0.04
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128

TEST:
  IMS_PER_BATCH: 64
  TTA: 'on'

OUTPUT_DIR: "dump/res18_cv0"
VERSION: 1

[02/15 18:41:27] mydl INFO: Running with full config:
DATALOADER:
  AUGMENT: heavy
  NUM_WORKERS: 8
  SAMPLER: weighted
  SAMPLER_WEIGHTS: datasets/train_split_0_weights.pickle
  SIZE_DIVISIBILITY: 0
DATASETS:
  TEST: test
  TEST_LABEL: kaggle/sample_submission.csv
  TEST_ROOT: kaggle/test
  TRAIN: train
  TRAIN_LABEL: datasets/train_split_0.csv
  TRAIN_ROOT: datasets/train
  VALID: valid
  VALID_LABEL: datasets/valid_split_0.csv
  VALID_ROOT: datasets/train
INPUT:
  MAX_SIZE_TEST: 512
  MAX_SIZE_TRAIN: 512
  MIN_SIZE_TEST: 512
  MIN_SIZE_TRAIN: 512
  TEST_PIXEL_MEAN: [0.0591, 0.0453, 0.0407, 0.0592]
  TEST_PIXEL_STD: [0.1037, 0.0798, 0.1066, 0.0988]
  TRAIN_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  TRAIN_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
  VALID_PIXEL_MEAN: [0.0874, 0.0518, 0.0514, 0.0793]
  VALID_PIXEL_STD: [0.1273, 0.0805, 0.1309, 0.1174]
MODEL:
  DEVICE: cuda
  LOSS: macro f1
  LOSS_WEIGHT: [1.0, 3.28, 2.03, 3.19, 2.77, 2.61, 3.08, 2.17, 5.94, 6.01, 6.08, 3.64, 3.62, 4.03, 3.45, 7.15, 4.16, 5.23, 3.77, 3.12, 5.25, 1.8, 3.41, 2.08, 5.23, 1.0, 4.75, 6.44]
  META_ARCHITECTURE: ProteinResnet
  NAME: resnet18_maxavg
  NUM_CLASS: 28
  WEIGHT: 
OUTPUT_DIR: dump/res18_cv0
SOLVER:
  BASE_LR: 0.04
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 10
  FINETUNE: on
  FINETUNE_EPOCH: 3
  FINETUNE_LR: 0.05
  GAMMA: 0.5
  IMS_PER_BATCH: 128
  MIXUP: off
  MOMENTUM: 0.9
  OPTIMIZER: sgd
  PATIENCE: 10
  SCHEDULER: StepLR
  STEPS: (10, 20, 30, 40, 50, 60, 70, 80, 90)
  STEP_SIZE: 8
  TRAIN_EPOCH: 100
  T_MAX: 10
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 64
  TTA: on
VERSION: 1
[02/15 18:41:27] mydl INFO: Full config saved to /w/mydl_demo/dump/res18_cv0/config.yaml
[02/15 18:41:28] mydl INFO: Model:
DataParallel(
  (module): NetWrapper(
    (backbone): ResNet18MaxAvgProtein(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer2): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer3): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer4): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Sequential(
        (bn1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop1): Dropout(p=0.5, inplace=False)
        (linear1): Linear(in_features=1024, out_features=512, bias=True)
        (relu1): ReLU()
        (bn2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (drop2): Dropout(p=0.5, inplace=False)
        (linear2): Linear(in_features=512, out_features=28, bias=True)
      )
      (conv1_y): Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
      (ada_avgpool): AdaptiveAvgPool2d(output_size=1)
      (ada_maxpool): AdaptiveMaxPool2d(output_size=1)
    )
  )
)
